---
layout: post
title: "Finding Meaning in Platform Engineering"
categories: [thoughts]
image: ibelonghere.png
---

I have been working for a few years in technology now, mostly in what's most commonly called platform engineering. And having been working for a few years I've noticed that, on a day-to-day basis, few of the challenges I encounter seem to directly relate to the actual impact of our work on people's lives. This is not something that is specific to this domain, I suppose. Rather it should be common to most types of engineering. After all we are supposed to be doing practical, quantifiable things to shape the world, and subjective things like feelings and emotions are just too nebulous to be of any use to us. Furthermore, there's a division of labour, and our strengths as engineers lie in our abstract reasoning and attention-to-detail, not in emotional intelligence. Maybe?  
<!--more-->
In platform engineering, like in any other software engineering role, we tend to reduce people's experience to tractable 'User Stories' in order to try and make useful things, e.g. "as a Developer I want to look at an availability dashboard so I can understand my software better". While this simplification is necessary to  define clear and achievable tasks, in platform engineering (especially) it has the unfortunate side-effect that we don't need to engage with people's values as people, only with the values they express through their roles. The question of whether a process makes me frustrated or angry would not be something that comes up in a user story, only whether the process can be carried out efficiently.  

There is a further complicating factor. Nominally, effectiveness from a business should mean simply to decrease costs and increase revenue. In a competitive market, both of these things should lead to value being created for consumers, as they are able to get things they want for a lower price. However, in practice, businesses build their own ideologies and seek to maximise their own idiosyncratic metrics of business value. This is not necessarily a bad thing, these values are built up over time as heuristics for efficiency and effectiveness. So they make decision-making easier as opposed to reasoning from first principles. However, if the environment has changed, the heuristics an organization has built up over time for decision-making may become less effective or completely invalidated. So, if we achieve all our explicit engineering goals we are still far from guaranteed to improve efficiency by any objective measure, we just produce this (somewhat) arbitrarily defined 'business value'. 

If we truly see engineering as a vocation, not just something we do to make a living, then this won't do at all. While we typically won't have the luxury of ignoring the business desires, we need to bring 'objective' values to the table as well. Unfortunately, although this may be debated hotly and lengthily, we cannot be certain that such values exist. To deal with this issue, we may take a two pronged approach. From the philosophical side, the best answer seems to be the existentialist one that it is up to each individual to create meaning for their existence. We need to find our values, and imbue our life with their meaning. While this sounds abstract, it is important that what we do day-to-day is in line with our deepest values. It is too easy to go through life in a sort of daze, going with what we know and never striking out far enough to find something more fulfilling. 

 In my case, some things I believe are that the actions we take should (i) encourage [expression of the four immeasurable states](http://www.viewonbuddhism.org/immeasurables_love_compassion_equanimity_rejoicing.html) and (ii) alleviate ['suffering'](http://www.lionsroar.com/deep-dukkha-part-2-the-three-kinds-of-suffering/). Since I've never been devout in any religion in particular, nor particularly conscientious about it, I frequently forget about these things. But when I do remember to ask myself how what I'm doing relates to these principles, what I should do becomes clearer and the path becomes easier. Even though the answer may not be readily apparent. 

While those were solely personal values, there are certainly some values that we should share as a profession. There have been many attempts to set out an Hippocratic oath for software engineers - or more plainly - a shared code of ethics. Although none seem to have caught on in the mind of engineers, [the IEEE code](https://www.ieee.org/about/corporate/governance/p7-8.html) is a reasonable and thought-provoking place to start. Due to the universal nature of such documents, this only covers the basic groundwork for ethical decision-making however. 

This post has been quite philosophical, so let's restate things in a simpler way. As a human being you have things you value for their own sake. Asking [sensible questions](http://blog.practicalethics.ox.ac.uk/2015/07/usable-ethics-user-design-and-ethics/) about the impact of your work on the experiences of others and the things you value is one of the most valuable things you can do, and is something that can never be automated. Humility is also important. The worth of a project is often defined by the effectiveness of the system, not its purpose. While its important not to be immobilized by Imposter Syndrome, its also important to know when you are out of your depth and to ask for help.

All software we provide should consider the suffering it can cause users. For example - bloated, unintuitive and arbitrary interfaces waste users time and makes them frustrated. On the other hand, although rarely, users can find elegance and joy in well-designed interfaces (also everywhere who touches a piece of code can find beauty in an elegant algorithm!). Even where this is not the case, responsive and intuitive interfaces and allow users to get into a state of [flow](https://www.psychologytoday.com/us/articles/199707/finding-flow) (which is good).For platforms specifically we can think about pain-points that developers often have:
 - Centralised infrastructure provisioning with long turnaround cycles stymies autonomy and dis-empower people. It can cause alienation     and even lead to conflict. For this reason we should enable self-service wherever possible - up to the point where e.g. it substantially endangers users' data
 - Lack of feedback in the software development process slows down learning and makes the process of developing software both less effic    ient and less enjoyable. This is why we need to provide tools to give quick feedback on software changes, and make sure access to those is readily available in and outside of a delivery pipeline.

And there are many more ways in which the platforms we use impact our experiences. In fact they are too many to number. But if we bring our attention to them, perhaps we can deal with them more skillfully. There is a Zen quote that deals with this beautifully:

 > Before Enlightenment chop wood, carry water. After enlightenment chop wood, carry water.

Although we must always go through the same process when building software, it is up to us how we interpret the purpose of each task, and how we let that purpose shape our approach to them.

